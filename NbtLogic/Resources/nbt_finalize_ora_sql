
--case 22692 (dch 3/16/2012)
create or replace function alnumOnly(inputStr in varchar2, replaceWith in varchar2) return varchar2 is
  Result varchar2(1000);
begin
  
  Result := regexp_replace(inputStr,'[[:space:]]', null );

  Result := regexp_replace(trim(Result), '[^a-zA-Z0-9_]', replaceWith ); 
  
  return(Result);
end alnumOnly;
/
commit;

create or replace function safeSqlParam(inputStr in varchar2) return varchar2 is
  Result varchar2(1000);
begin
  
  Result := regexp_replace(inputStr,'''', '''''' );

  return(Result);
end safeSqlParam;
/
commit;

create or replace function OraColLen(aprefix in varchar2,inputStr in varchar2,asuffix in varchar2) return varchar2 is
  Result varchar2(100);
  maxlen number(3);
begin
  --dbms_output.put_line(aprefix || inputstr || asuffix);
  maxlen := 28- nvl(length(aprefix),0) - nvl(length(asuffix),0);
  --dbms_output.put_line(maxlen);
  Result := aprefix || substr(trim(inputStr),1,maxlen) || asuffix; 
  --dbms_output.put_line(Result);
  return(Result);
end OraColLen;
/
commit;


create or replace view vwAutoViewColNames as 
select n.nodetypename,p.propname,'NT' || upper(alnumonly(n.nodetypename,'')) viewname, 
case
 when s.subfieldname is null then 'P' || to_char(p.firstpropversionid) 
 when s.subfieldname is not null and fktype='ObjectClassId' then 'P' || to_char(p.firstpropversionid) || '_' || alnumonly(ocfk.objectclass,'') || '_OCFK'
 when s.subfieldname is not null and fktype='NodeTypeId' then 'P' || to_char(p.firstpropversionid) || '_' || alnumonly(ntfk.nodetypename,'') || '_NTFK'
 else 'P' || to_char(p.firstpropversionid) || '_' || s.subfieldname
end colname
from nodetype_props p
 join nodetypes n on n.nodetypeid=p.nodetypeid
 join object_class c on c.objectclassid=n.objectclassid
 join field_types f on f.fieldtypeid=p.fieldtypeid
 join field_types_subfields s on s.fieldtypeid=f.fieldtypeid and s.reportable='1'
 left outer join nodetypes ntfk on ntfk.nodetypeid=p.fkvalue and p.fktype='NodeTypeId'
 left outer join object_class ocfk on ocfk.objectclassid=p.fkvalue and p.fktype='ObjectClassId' 
order by n.nodetypename,p.propname,s.subfieldname;
/
commit;

create or replace view vwntpropdefs as
select ntp.nodetypeid,ntp.questionno,ntp.propname,ntp.firstpropversionid nodetypepropid,ft.fieldtype,ft.fieldtypeid,ntp.fktype,ntp.fkvalue,
  nt.nodetypename,oc.objectclass
 from nodetype_props ntp
 join field_types ft on ft.fieldtypeid=ntp.fieldtypeid and ft.deleted='0'
 left outer join nodetypes nt on nt.nodetypeid=ntp.fkvalue and ntp.fktype='NodeTypeId'
 left outer join object_class oc on oc.objectclassid=ntp.fkvalue and ntp.fktype='ObjectClassId';
/ 
commit;

create or replace view vwnpv as
select j.nodeid nid,to_char(j.gestalt) gestalt,
  field1_fk,field1_date,field2_date,field1_numeric,field2_numeric,
  field1,field2,field3,field4,to_char(clobdata) clobdata,
  nodetypepropid ntpid from jct_nodes_props j;
/
commit;

create or replace view vwnpvname as
select j.nodeid nid,to_char(j.gestalt) gestalt,field1_fk,j.nodetypepropid ntpid,OraColLen('P_',alnumonly(ntp.propname,''),'') safepropname 
  from jct_nodes_props j
  join nodetype_props ntp on ntp.nodetypepropid=j.nodetypepropid;
/
commit;


create or replace view vwQuestionDetail as
select jnp.nodeid,ntp.propname question,jnp.field1 answer,jnp.field2 correctiveaction,jnp.field3 iscompliant,
 to_char(jnp.clobdata) comments,jnp.field1_date dateanswered,jnp.field2_date datecorrected,
 ntp.questionno
  from jct_nodes_props jnp
 join nodetype_props ntp on ntp.nodetypepropid=jnp.nodetypepropid
 join field_types ft on ft.fieldtypeid=ntp.fieldtypeid and ft.fieldtype='Question';
/
commit; 
 

create or replace procedure createNTview(ntid in number) is
  cursor props is
  select v.*,s.propcolname subfieldname,s.is_default,s.subfieldname subfieldalias from vwNtPropDefs v
    join field_types_subfields s on s.fieldtypeid=v.fieldtypeid and s.reportable='1'
    where v.nodetypeid=ntid order by lower(propname);
  var_sql varchar2(32000);
  var_line varchar(2000);
  pname varchar2(200);
  pcount number;
  viewname varchar2(30);
  objid number;
  ntcount number;
begin
  --dbms_output.enable(32000);


 select count(*) into ntcount from nodetypes where nodetypeid=ntid;
  
 if(ntcount>0) then
  select substr(nodetypename,1,29),objectclassid into viewname,objid from nodetypes where nodetypeid=ntid;

  var_line:='create or replace view ' || OraColLen('NT',alnumonly(viewname,''),'') || ' as select n.nodeid ';
  --dbms_output.put_line(var_line);
  var_sql := var_sql || var_line;
  pcount:=0;

  for rec in props loop
      pcount:=pcount+1;
      --dbms_output.put_line(to_char(pcount) || '|' || safeSqlParam(rec.propname) || '|' || rec.subfieldname || '|' || rec.fieldtype || '|' || rec.objectclass || '|' || rec.nodetypename);
      pname := to_char(rec.nodetypepropid);
      if(rec.is_default='1') then
        var_line := ',(select ' || rec.subfieldname || ' from vwNpv where nid=n.nodeid and ntpid=' || to_char(rec.nodetypepropid);
        var_line := var_line || ')' || OraColLen('P',alnumonly(upper(pname),''),'');
        --dbms_output.put_line(var_line);
        var_sql := var_sql || var_line;
      else
        if(rec.fieldtype='Relationship' or rec.fieldtype='Location') then
          if(rec.fktype='NodeTypeId') then
            var_line := ',(select ' || rec.subfieldname || ' from vwNpv where nid=n.nodeid and ntpid=' || to_char(rec.nodetypepropid) || ') ';
            var_line := var_line  || OraColLen('P',alnumonly(upper(pname || '_' || rec.nodetypename),''),'_NTFK');
          --  dbms_output.put_line(var_line);
            var_sql := var_sql || var_line;
          else
            var_line := ',(select ' || rec.subfieldname || ' from vwNpv where nid=n.nodeid and ntpid=' || to_char(rec.nodetypepropid) || ') ';
            var_line:=var_line || OraColLen('P',alnumonly(upper(pname || rec.objectclass),''),'_OCFK');
          --  dbms_output.put_line(var_line);
            var_sql := var_sql || var_line;
          end if;
        else
          var_line := ',(select ' || rec.subfieldname || ' from vwNpv where nid=n.nodeid and ntpid=' || to_char(rec.nodetypepropid) || ') ';
          var_line:=var_line || OraColLen('P',alnumonly(upper(pname || '_' || rec.subfieldalias),''),'');
          --dbms_output.put_line(var_line);
          var_sql := var_sql || var_line;
        end if;
      end if;
  end loop;

  if(pcount>0) then
    var_line := ' from nodes n where n.nodetypeid=' || to_char(ntid);
    --dbms_output.put_line(var_line);
    var_sql := var_sql || var_line;
    execute immediate (var_sql);
    commit;
    createOCview(objid);
  end if;
 end if;

end createNTview;
/

commit;


create or replace view vwobjprops as
select distinct OraColLen('P_', alnumonly(ntp.propname, ''), '') safepropname,'gestalt' subfieldname,nt.objectclassid,'' subfieldalias,ft.fieldtype
 from nodetype_props ntp
 join nodetypes nt on nt.nodetypeid=ntp.nodetypeid
 join field_types ft on ft.fieldtypeid=ntp.fieldtypeid
/
commit;


create or replace procedure createOCview(objid in number) is
  cursor props is select v.* 
                    from vwObjProps v 
                   where v.objectclassid=objid order by lower(safepropname);
  var_sql varchar2(20000);
  aline varchar(2000);
  pcount number;
  viewname varchar(30);
begin
  --dbms_output.enable(21000);
  select substr(objectclass,1,29) into viewname from object_class where objectclassid=objid;  

  var_sql:='create or replace view ' || OraColLen('OC',alnumonly(viewname,''),'') || ' as select n.nodeid ';
  --dbms_output.put_line(var_sql);
  pcount:=0;
  
  for rec in props loop
      pcount:=pcount+1;
      
      aline:=',(select ' || rec.subfieldname || ' from vwNpvname where nid=n.nodeid and safepropname=''' || rec.safepropname || ''') ' || upper(rec.safepropname);
      --dbms_output.put_line(aline);
      var_sql:=var_sql || aline;
      
      if(rec.fieldtype='Relationship' or rec.fieldtype='Location') then
        aline:=',(select field1_fk from vwNpvname where nid=n.nodeid and safepropname=''' || rec.safepropname || ''') ' || OraColLen('',upper(rec.safepropname),'_FK');
        var_sql:=var_sql || aline;
      end if;
      
  end loop;
  
  if(pcount>0) then 
    aline:= ' from nodes n join nodetypes nt on nt.nodetypeid=n.nodetypeid and nt.objectclassid=' || to_char(objid);
      --dbms_output.put_line(aline);
      var_sql:=var_sql || aline;
    execute immediate (var_sql);
    commit;
  end if;

end createOCview;
/

commit;


create or replace procedure CreateAllNtViews is
  cursor nts is
        select nodetypeid,nodetypename,firstversionid from nodetypes 
        where firstversionid=nodetypeid order by lower(nodetypename);
  cursor ntsdel is
	select object_name from user_objects where object_type='VIEW' and object_name like 'NT%' or object_name like 'OC%';
  var_sql varchar2(200);	  
begin
  for delrec in ntsdel loop
	var_sql := 'drop view ' || delrec.object_name;
	execute immediate (var_sql);	
  end loop;
  commit;

  for rec in nts loop
    --dbms_output.put_line('createntview(' || to_char(rec.nodetypeid) || ',' || rec.nodetypename || ')');
    CreateNtView(rec.nodetypeid);
  end loop;
end CreateAllNtViews;
/
commit;


--
--TEST: begin creation of views...
--
--set serveroutput on;

exec CreateAllNtViews();

commit;

--end case 22962



create or replace view vwNbtUser as 
select n.nodeid, t.nodetypeid, oc.objectclassid, u.Username, ocp.propname, p.nodetypepropid, j.field1_fk, j.field1_date, j.gestalt
  from nodes n
  join nodetypes t on n.nodetypeid = t.nodetypeid
  join object_class oc on t.objectclassid = oc.objectclassid
  join object_class_props ocp on oc.objectclassid = ocp.objectclassid
  join nodetype_props p on p.objectclasspropid = ocp.objectclasspropid
                       and t.nodetypeid = p.nodetypeid
  join jct_nodes_props j on p.nodetypepropid = j.nodetypepropid
                        and j.nodeid = n.nodeid
  join (select j.nodeid, j.field1 as username
          from jct_nodes_props j
          join nodetype_props p on p.nodetypepropid = j.nodetypepropid
          join object_class_props ocp on p.objectclasspropid = ocp.objectclasspropid
          join object_class oc on oc.objectclassid = ocp.objectclassid
         where oc.objectclass = 'UserClass'
           and ocp.propname = 'Username') u on u.nodeid = n.nodeid
 where oc.objectclass = 'UserClass';
/
commit;
  
create or replace view vwNbtRole as 
  select n.nodeid, t.nodetypeid, oc.objectclassid, u.Username, ocp.propname, p.nodetypepropid, j.field1_fk, j.field1_date, j.gestalt
  from nodes n
  join nodetypes t on n.nodetypeid = t.nodetypeid
  join object_class oc on t.objectclassid = oc.objectclassid
  join object_class_props ocp on oc.objectclassid = ocp.objectclassid
  join nodetype_props p on p.objectclasspropid = ocp.objectclasspropid 
                       and t.nodetypeid = p.nodetypeid
  join jct_nodes_props j on p.nodetypepropid = j.nodetypepropid 
                        and j.nodeid = n.nodeid
  where oc.objectclass = 'RoleClass';
  
/
commit;

quit


