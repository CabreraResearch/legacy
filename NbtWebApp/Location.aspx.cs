using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using ChemSW.Nbt;
using ChemSW.Core;
using ChemSW.NbtWebControls;
using ChemSW.NbtWebControls.FieldTypes;
using ChemSW.Nbt.ObjClasses;
using ChemSW.Security;
using ChemSW.Exceptions;
using Telerik.Web.UI;
using ChemSW.CswWebControls;

namespace ChemSW.Nbt.WebPages
{
    public partial class Location : System.Web.UI.Page
    {
        #region Local Variables

        private string _AddNodeActionPre = "addnode_";

        private string SelectedTabId
        {
            get
            {
                string ret = string.Empty;
                EnsureChildControls();
                if (PropTable != null && PropTable.TabStrip.SelectedTab != null)
                    ret = PropTable.TabStrip.SelectedTab.Value;
                else if (Session["Location_SelectedTabId"] != null && Session["Location_SelectedTabId"].ToString() != string.Empty)
                    ret = Session["Location_SelectedTabId"].ToString();
                return ret;
            }
            set
            {
                EnsureChildControls();

                if (PropTable.TabStrip.SelectedTab != null)
                    PropTable.TabStrip.SelectedTab.Selected = false;

                foreach (RadTab Tab in PropTable.TabStrip.Tabs)
                {
                    if (Tab.Value == value)
                    {
                        Tab.Selected = true;
                        break;
                    }
                }
            }
        }

        #endregion Local Variables

        #region Page Lifecycle

        protected override void OnInit(EventArgs e)
        {
            try
            {
                EnsureChildControls();
                initMainMenu();
            }
            catch (Exception ex)
            {
                Master.HandleError(ex);
            }

            base.OnInit(e);
        }

        //private RadAjaxManager _AjaxManager;
        private CswMainMenu MainMenu;
        private CswLocationNavigator LocationNavigator;
        private CswPropertyTable PropTable;
        protected override void CreateChildControls()
        {
            MainMenu = new CswMainMenu(Master.CswNbtResources);
            MainMenu.OnError += new CswErrorHandler(Master.HandleError);
            MainMenuPlaceHolder.Controls.Add(MainMenu);

            LocationNavigator = new CswLocationNavigator(Master.CswNbtResources);//, false);
            LocationNavigator.OnError += new CswErrorHandler(Master.HandleError);
            LocationNavigatorPlaceHolder.Controls.Add(LocationNavigator);

            PropTable = new CswPropertyTable( Master.CswNbtResources, Master.AjaxManager );
            PropTable.EnableViewState = false;
            PropTable.OnError += new CswErrorHandler(Master.HandleError);
            PropGridPlaceHolder.Controls.Add(PropTable);

            //_AjaxManager = new RadAjaxManager();
            //_AjaxManager.ID = "am";
            //PropGridPlaceHolder.Controls.Add(_AjaxManager);

            base.CreateChildControls();
        }

        protected override void OnLoad(EventArgs e)
        {
            try
            {
                // This has to happen here in order for events generated by dynamic controls to occur.
                initLocationNavigator();
                initContent();
                hookupEvents();

                //HeadLabel.Text = "View By Location";
            }
            catch (Exception ex)
            {
                Master.HandleError(ex);
            }
        }

        protected override void OnUnload(EventArgs e)
        {
            Session["Location_SelectedTabId"] = SelectedTabId;
            base.OnUnload(e);
        }

        #endregion Page Lifecycle

        #region Object Initialization

        private void hookupEvents()
        {
            LocationNavigator.OnLocationImageClick += new CswLocationImage.ClickHandler(LocationNavigator_OnLocationImageClick);
            LocationNavigator.OnBreadCrumbClick += new CswBreadCrumb.ClickHandler(LocationNavigator_OnBreadCrumbClick);
            MainMenu.MainMenuItemSelected += new RadMenuEventHandler(MainMenu_MainMenuItemSelected);
            //Menu.ItemSelectedEventHandler(MainMenu_ItemSelected);
            PropTable.TabStrip.TabClick += new RadTabStripEventHandler(TabStrip_TabClick); 
            PropTable.SaveButton.Click += new EventHandler(SaveButton_Click);

            if (PropTable != null && PropTable.SaveButton != null)
            {
                Master.AjaxManager.ClientEvents.OnResponseEnd = "MainAjaxManager_OnResponseEnd";
                Master.AjaxManager.AjaxSettings.AddAjaxSetting(PropTable.SaveButton, MainMenu);
                Master.AjaxManager.AjaxSettings.AddAjaxSetting(PropTable.SaveButton, Master.ErrorBox);
                Master.AjaxManager.AjaxSettings.AddAjaxSetting(PropTable.SaveButton, PropTable);
            }
        }

        protected void initMainMenu()
        {
            MainMenu.AllowAdd = false;
            MainMenu.AllowDelete = false;
            MainMenu.AllowEditView = false;
            //MainMenu.ItemLooks = Master.ItemLooks;
            MainMenu.DataBind();
        }


        protected void initLocationNavigator()
        {
            LocationNavigator.DataBind();

            //LocationUpdatePanel.Update();
        }

        protected void initContent()
        {
            CswPrimaryKey NodeId = LocationNavigator.SelectedNodeId;
            if (NodeId != null)
            {
                PropTable.Visible = true;
                PropTable.EditMode = NodeEditMode.Edit;
                
                if (PropTable.SelectedNode == null || PropTable.SelectedNode.NodeId != NodeId || PropTable.SelectedTabId != SelectedTabId)
                {
                    CswNbtNode Node = Master.CswNbtResources.Nodes[NodeId];
                    PropTable.SelectedTabId = SelectedTabId;
                    //PropTable.SelectedNodeText = Node.NodeName;
                    //PropTable.SelectedNodeKey = new CswNbtNodeKey(Master.CswNbtResources, null, string.Empty, Node.NodeId, Node.NodeSpecies, Node.NodeTypeId, Node.ObjectClassId, string.Empty, string.Empty );
                    PropTable.SelectedNode = Node;
                    //PropTable.SelectedNodeTypeId = Node.NodeTypeId;
                    PropTable.initTabStrip();
                    SelectedTabId = PropTable.initTabContents();
                }
            }
            else
            {
                PropTable.Visible = false;
                //    PropGrid.Clear();
                //    PropGrid.NodeKey = null;
                //    PropGrid.Visible = false;
            }
        }

        #endregion Object Initialization

        #region Events

        void TabStrip_TabClick(object sender, RadTabStripEventArgs e)
        {
            try
            {
                //PropTable.SelectedTabId = e.Tab.Value;
                //PropTable.initTabStrip();
                //SelectedTabId = PropTable.initTabContents();
                SelectedTabId = e.Tab.Value;
                initContent();
            }
            catch (Exception ex)
            {
                Master.HandleError(ex);
            }
        }

        void LocationNavigator_OnBreadCrumbClick(object sender, CswBreadCrumb.CswBreadCrumbClickEventArgs e)
        {
            try
            {
                SelectedTabId = string.Empty;
                initContent();
            }
            catch (Exception ex)
            {
                Master.HandleError(ex);
            }
        }

        void LocationNavigator_OnLocationImageClick(object sender, CswLocationImage.CswLocationImageClickEventArgs e)
        {
            try
            {
                SelectedTabId = string.Empty;
                initContent();
            }
            catch (Exception ex)
            {
                Master.HandleError(ex);
            }
        }

        void SaveButton_Click(object sender, EventArgs e)
        {
            try
            {
                // The actual save is handled by the CswPropertyGrid

                // Commit any transactions
                Master.CswNbtResources.finalize();

                // Reload the tree and content panes
                initLocationNavigator();
                initContent();
            }
            catch (Exception ex)
            {
                Master.HandleError(ex);
            }
        }

        void MainMenu_MainMenuItemSelected(object sender, RadMenuEventArgs e)
        {
            try
            {
                RadMenuItem SelectedItem = e.Item;

                if (SelectedItem.ID.Substring(0, _AddNodeActionPre.Length) == _AddNodeActionPre)
                {
                    //// Add a new Node

                    //CswNbtNodeKey NewKey = null;
                    //Int32 NodeTypeId = Convert.ToInt32(SelectedItem.ID.Substring(_AddNodeActionPre.Length, SelectedItem.ID.Length - _AddNodeActionPre.Length));

                    //DataTable NodeTypeTable = _CswDataSource.getNodeType(NodeTypeId);

                    //// Change the view if necessary
                    //if (NodesTree.SelectedNodeIsRoot())
                    //{

                    //    ICswNbtTree Tree = _CswDataSource.getTree("", ViewXml, "", ViewId);
                    //    _TreeKey = Tree.Key;
                    //    Tree.makeNodeCurrent(NodesTree.SelectedNodeKey);
                    //    CswNbtNode Node = Tree.getNodeForCurrentPosition();
                    //    if (!Node.AllowedChildNodeTypes.Contains(NodeTypeId))
                    //    {
                    //        // Add the nodetype to the root of the current view.
                    //        CswNbtView View = new CswNbtView();
                    //        if (ViewXml != String.Empty)
                    //            View.LoadXml(ViewXml);
                    //        else
                    //            View.LoadXml(_CswDataSource.getViewXmlFromId(ViewId));

                    //        CswNbtViewRelationship NewRootRelationship = new CswNbtViewRelationship();
                    //        NewRootRelationship.SecondType = CswNbtViewRelationship.RelatedIdType.NodeTypeId;
                    //        NewRootRelationship.SecondId = NodeTypeId;
                    //        NewRootRelationship.SecondName = NodeTypeTable.Rows[0]["nodetypename"].ToString();
                    //        NewRootRelationship.SecondIconFileName = "icons/" + NodeTypeTable.Rows[0]["iconfilename"].ToString();
                    //        View.Root.addChildRelationship(NewRootRelationship);

                    //        ViewXml = View.ToString();
                    //    }
                    //}

                    //NewKey = _CswDataSource.createNode(NodeTypeId, _TreeId, ViewId, ViewXml, NodesTree.SelectedNodeKey);
                    //initNodesTree(NewKey, true, true);
                }

                // Commit any transactions
                Master.CswNbtResources.finalize();

                // Reload the tree and content panes
                initLocationNavigator();
                initContent();
            }
            catch (Exception ex)
            {
                Master.HandleError(ex);
            }
        }

        protected void DeleteButton_OnClickHandler(object sender, EventArgs e)
        {
            try
            {
                //_CswDataSource.deleteNode(NodesTree.SelectedNodeKey);

                // Commit any transactions
                Master.CswNbtResources.finalize();

                // Reload the tree and content panes
                initLocationNavigator();
                initContent();
            }
            catch (Exception ex)
            {
                Master.HandleError(ex);
            }
        }

        #endregion Events


    }
}
